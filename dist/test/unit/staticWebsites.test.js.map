{
  "version": 3,
  "sources": ["../../../test/unit/staticWebsites.test.ts"],
  "sourcesContent": ["import AWSMock from \"aws-sdk-mock\";\nimport * as sinon from \"sinon\";\nimport { ListObjectsV2Output, ListObjectsV2Request } from \"aws-sdk/clients/s3\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { baseConfig, pluginConfigExt, runServerless } from \"../utils/runServerless\";\nimport * as CloudFormationHelpers from \"../../src/CloudFormation\";\nimport { computeS3ETag } from \"../../src/utils/s3-sync\";\n\ndescribe(\"static websites\", () => {\n    afterEach(() => {\n        sinon.restore();\n        AWSMock.restore();\n    });\n\n    it(\"should create all required resources\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            cliArgs: [\"package\"],\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                    },\n                },\n            }),\n        });\n        const bucketLogicalId = computeLogicalId(\"landing\", \"Bucket\");\n        const bucketPolicyLogicalId = computeLogicalId(\"landing\", \"Bucket\", \"Policy\");\n        const originAccessIdentityLogicalId = computeLogicalId(\"landing\", \"OriginAccessIdentity\");\n        const edgeFunction = computeLogicalId(\"landing\", \"ResponseFunction\");\n        const cfDistributionLogicalId = computeLogicalId(\"landing\", \"CDN\");\n        const cfOriginId = computeLogicalId(\"landing\", \"CDN\", \"Origin1\");\n        expect(Object.keys(cfTemplate.Resources)).toStrictEqual([\n            \"ServerlessDeploymentBucket\",\n            \"ServerlessDeploymentBucketPolicy\",\n            bucketLogicalId,\n            bucketPolicyLogicalId,\n            originAccessIdentityLogicalId,\n            edgeFunction,\n            cfDistributionLogicalId,\n        ]);\n        expect(cfTemplate.Resources[bucketLogicalId]).toMatchObject({\n            Type: \"AWS::S3::Bucket\",\n            UpdateReplacePolicy: \"Delete\",\n            DeletionPolicy: \"Delete\",\n        });\n        expect(cfTemplate.Resources[bucketPolicyLogicalId]).toMatchObject({\n            Properties: {\n                Bucket: {\n                    Ref: bucketLogicalId,\n                },\n                PolicyDocument: {\n                    Statement: [\n                        {\n                            Action: [\"s3:GetObject*\", \"s3:GetBucket*\", \"s3:List*\"],\n                            Effect: \"Allow\",\n                            Principal: {\n                                CanonicalUser: {\n                                    \"Fn::GetAtt\": [originAccessIdentityLogicalId, \"S3CanonicalUserId\"],\n                                },\n                            },\n                            Resource: [\n                                {\n                                    \"Fn::GetAtt\": [bucketLogicalId, \"Arn\"],\n                                },\n                                {\n                                    \"Fn::Join\": [\n                                        \"\",\n                                        [\n                                            {\n                                                \"Fn::GetAtt\": [bucketLogicalId, \"Arn\"],\n                                            },\n                                            \"/*\",\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                    ],\n                    Version: \"2012-10-17\",\n                },\n            },\n        });\n        expect(cfTemplate.Resources[originAccessIdentityLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::CloudFrontOriginAccessIdentity\",\n            Properties: {\n                CloudFrontOriginAccessIdentityConfig: {\n                    Comment: \"Identity that represents CloudFront for the landing static website.\",\n                },\n            },\n        });\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    CustomErrorResponses: [\n                        {\n                            ErrorCachingMinTTL: 0,\n                            ErrorCode: 404,\n                            ResponseCode: 200,\n                            ResponsePagePath: \"/index.html\",\n                        },\n                    ],\n                    DefaultCacheBehavior: {\n                        AllowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\"],\n                        Compress: true,\n                        TargetOriginId: cfOriginId,\n                        ViewerProtocolPolicy: \"redirect-to-https\",\n                        FunctionAssociations: [\n                            {\n                                EventType: \"viewer-response\",\n                                FunctionARN: {\n                                    \"Fn::GetAtt\": [edgeFunction, \"FunctionARN\"],\n                                },\n                            },\n                        ],\n                    },\n                    DefaultRootObject: \"index.html\",\n                    Enabled: true,\n                    HttpVersion: \"http2\",\n                    IPV6Enabled: true,\n                    Origins: [\n                        {\n                            DomainName: {\n                                \"Fn::GetAtt\": [bucketLogicalId, \"RegionalDomainName\"],\n                            },\n                            Id: cfOriginId,\n                            S3OriginConfig: {\n                                OriginAccessIdentity: {\n                                    \"Fn::Join\": [\n                                        \"\",\n                                        [\n                                            \"origin-access-identity/cloudfront/\",\n                                            {\n                                                Ref: originAccessIdentityLogicalId,\n                                            },\n                                        ],\n                                    ],\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n        });\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"landing\", \"BucketName\")]: {\n                Description: \"Name of the bucket that stores the static website.\",\n                Value: {\n                    Ref: bucketLogicalId,\n                },\n            },\n            [computeLogicalId(\"landing\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n            [computeLogicalId(\"landing\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n            [computeLogicalId(\"landing\", \"DistributionId\")]: {\n                Description: \"ID of the CloudFront distribution.\",\n                Value: {\n                    Ref: cfDistributionLogicalId,\n                },\n            },\n        });\n        expect(cfTemplate.Resources[edgeFunction]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                AutoPublish: true,\n                FunctionConfig: {\n                    Comment: \"app-dev-us-east-1-landing-response\",\n                    Runtime: \"cloudfront-js-1.0\",\n                },\n                Name: \"app-dev-us-east-1-landing-response\",\n            },\n        });\n    });\n\n    it(\"should support a custom domain\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            cliArgs: [\"package\"],\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                        domain: \"example.com\",\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"landing\", \"CDN\");\n        // Check that CloudFront uses the custom ACM certificate and custom domain\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Aliases: [\"example.com\"],\n                    ViewerCertificate: {\n                        AcmCertificateArn:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                        MinimumProtocolVersion: \"TLSv1.2_2019\",\n                        SslSupportMethod: \"sni-only\",\n                    },\n                },\n            },\n        });\n        // The domain should be the custom domain, not the CloudFront one\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"landing\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: \"example.com\",\n            },\n            [computeLogicalId(\"landing\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n        });\n    });\n\n    it(\"should support multiple custom domains\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            cliArgs: [\"package\"],\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                        domain: [\"example.com\", \"www.example.com\"],\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"landing\", \"CDN\");\n        // Check that CloudFront uses all the custom domains\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Aliases: [\"example.com\", \"www.example.com\"],\n                },\n            },\n        });\n        // This should contain the first domain of the list\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"landing\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: \"example.com\",\n            },\n            [computeLogicalId(\"landing\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n        });\n    });\n\n    it(\"should allow to customize security HTTP headers\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            cliArgs: [\"package\"],\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                        security: {\n                            allowIframe: true,\n                        },\n                    },\n                },\n            }),\n        });\n        const edgeFunction = computeLogicalId(\"landing\", \"ResponseFunction\");\n        expect(cfTemplate.Resources[edgeFunction]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                // Check that the `x-frame-options` header is not set\n                FunctionCode: `function handler(event) {\n    var response = event.response;\n    response.headers = Object.assign({}, {\n    \"x-content-type-options\": {\n        \"value\": \"nosniff\"\n    },\n    \"x-xss-protection\": {\n        \"value\": \"1; mode=block\"\n    },\n    \"strict-transport-security\": {\n        \"value\": \"max-age=63072000\"\n    }\n}, response.headers);\n    return response;\n}`,\n            },\n        });\n    });\n\n    it(\"should synchronize files to S3\", async () => {\n        sinon.stub(CloudFormationHelpers, \"getStackOutput\").returns(Promise.resolve(\"bucket-name\"));\n        /*\n         * This scenario simulates the following:\n         * - index.html is up to date, it should be ignored\n         * - styles.css has changes, it should be updated to S3\n         * - scripts.js is new, it should be created in S3\n         * - image.jpg doesn't exist on disk, it should be removed from S3\n         */\n        mockBucketContent([\n            {\n                Key: \"index.html\",\n                ETag: computeS3ETag(\n                    fs.readFileSync(path.join(__dirname, \"../fixtures/staticWebsites/public/index.html\"))\n                ),\n            },\n            { Key: \"styles.css\" },\n            { Key: \"image.jpg\" },\n        ]);\n        const putObjectSpy = sinon.stub().returns(Promise.resolve());\n        AWSMock.mock(\"S3\", \"putObject\", putObjectSpy);\n        const deleteObjectsSpy = sinon.stub().returns(Promise.resolve());\n        AWSMock.mock(\"S3\", \"deleteObjects\", deleteObjectsSpy);\n        const cloudfrontInvalidationSpy = sinon.stub().returns(Promise.resolve());\n        AWSMock.mock(\"CloudFront\", \"createInvalidation\", cloudfrontInvalidationSpy);\n\n        await runServerless({\n            fixture: \"staticWebsites\",\n            configExt: pluginConfigExt,\n            cliArgs: [\"landing:upload\"],\n        });\n\n        // scripts.js and styles.css were updated\n        sinon.assert.callCount(putObjectSpy, 2);\n        expect(putObjectSpy.firstCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"scripts.js\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/staticWebsites/public/scripts.js\")),\n            ContentType: \"application/javascript\",\n        });\n        expect(putObjectSpy.secondCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"styles.css\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/staticWebsites/public/styles.css\")),\n            ContentType: \"text/css\",\n        });\n        // image.jpg was deleted\n        sinon.assert.calledOnce(deleteObjectsSpy);\n        expect(deleteObjectsSpy.firstCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Delete: {\n                Objects: [\n                    {\n                        Key: \"image.jpg\",\n                    },\n                ],\n            },\n        });\n        // A CloudFront invalidation was triggered\n        sinon.assert.calledOnce(cloudfrontInvalidationSpy);\n    });\n});\n\nfunction mockBucketContent(objects: Array<{ Key: string; ETag?: string }>) {\n    AWSMock.mock(\n        \"S3\",\n        \"listObjectsV2\",\n        (params: ListObjectsV2Request, callback: (a: null, b: ListObjectsV2Output) => void) => {\n            callback(null, {\n                IsTruncated: false,\n                Contents: objects,\n            });\n        }\n    );\n}\n"],
  "mappings": "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",
  "names": []
}
