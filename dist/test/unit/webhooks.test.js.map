{
  "version": 3,
  "sources": ["../../../test/unit/webhooks.test.ts"],
  "sourcesContent": ["import { pluginConfigExt, runServerless } from \"../utils/runServerless\";\n\ndescribe(\"webhooks\", () => {\n    it(\"should implement custom authorizer by default\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"webhooks\",\n            configExt: pluginConfigExt,\n            cliArgs: [\"package\"],\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"stripe\", \"Route\")]).toMatchObject({\n            Properties: {\n                AuthorizationType: \"CUSTOM\",\n            },\n        });\n    });\n    it(\"should allow insecure webhook\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"webhooksInsecure\",\n            configExt: pluginConfigExt,\n            cliArgs: [\"package\"],\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"github\", \"Route\")]).toMatchObject({\n            Properties: {\n                AuthorizationType: \"NONE\",\n            },\n        });\n    });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,2BAA+C;AAE/C,SAAS,YAAY,MAAM;AACvB,KAAG,iDAAiD,YAAY;AAC5D,UAAM,CAAE,YAAY,oBAAqB,MAAM,wCAAc;AAAA,MACzD,SAAS;AAAA,MACT,WAAW;AAAA,MACX,SAAS,CAAC;AAAA;AAEd,WAAO,WAAW,UAAU,iBAAiB,UAAU,WAAW,cAAc;AAAA,MAC5E,YAAY;AAAA,QACR,mBAAmB;AAAA;AAAA;AAAA;AAI/B,KAAG,iCAAiC,YAAY;AAC5C,UAAM,CAAE,YAAY,oBAAqB,MAAM,wCAAc;AAAA,MACzD,SAAS;AAAA,MACT,WAAW;AAAA,MACX,SAAS,CAAC;AAAA;AAEd,WAAO,WAAW,UAAU,iBAAiB,UAAU,WAAW,cAAc;AAAA,MAC5E,YAAY;AAAA,QACR,mBAAmB;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
