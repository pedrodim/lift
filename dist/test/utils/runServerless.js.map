{
  "version": 3,
  "sources": ["../../../test/utils/runServerless.ts"],
  "sourcesContent": ["import path from \"path\";\nimport { Names } from \"@aws-cdk/core\";\nimport type originalRunServerless from \"@serverless/test/run-serverless\";\nimport setupRunServerlessFixturesEngine from \"@serverless/test/setup-run-serverless-fixtures-engine\";\nimport type { AWS } from \"@serverless/typescript\";\nimport { Serverless } from \"../../src/types/serverless\";\n\ntype ComputeLogicalId = (...address: string[]) => string;\n\ntype RunServerlessPromiseReturn = ReturnType<typeof originalRunServerless>;\ntype ThenArg<T> = T extends PromiseLike<infer U> ? U : T;\ntype RunServerlessReturn = ThenArg<RunServerlessPromiseReturn>;\n\nconst computeLogicalId = (serverless: Serverless, ...address: string[]): string => {\n    const initialNode = serverless.stack.node;\n    const foundNode = [...address].reduce((currentNode, nextNodeId) => {\n        const nextNode = currentNode.tryFindChild(nextNodeId);\n        if (!nextNode) {\n            throw new Error(`No node named ${nextNodeId} found in ${address.join(\".\")} address.`);\n        }\n\n        return nextNode.node;\n    }, initialNode);\n\n    // Some CDK constructs have a sub-node called `Resource`, some others don't\n    const resourceNode = foundNode.tryFindChild(\"Resource\");\n    if (resourceNode) {\n        return Names.nodeUniqueId(resourceNode.node);\n    }\n\n    return Names.nodeUniqueId(foundNode);\n};\n\nexport const runServerless = async (\n    options: Parameters<typeof originalRunServerless>[0]\n): Promise<RunServerlessReturn & { computeLogicalId: ComputeLogicalId }> => {\n    const runServerlessReturnValues = await setupRunServerlessFixturesEngine({\n        fixturesDir: path.resolve(__dirname, \"../fixtures\"),\n        serverlessDir: path.resolve(__dirname, \"../../node_modules/serverless\"),\n    })(options);\n\n    return {\n        ...runServerlessReturnValues,\n        computeLogicalId: (...address: string[]) =>\n            computeLogicalId(runServerlessReturnValues.serverless as Serverless, ...address),\n    };\n};\n\nexport const pluginConfigExt = {\n    plugins: [path.join(process.cwd(), \"src/plugin.ts\")],\n};\n\nexport const baseConfig: AWS = {\n    service: \"app\",\n    provider: {\n        name: \"aws\",\n    },\n    plugins: [path.join(process.cwd(), \"src/plugin.ts\")],\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiB;AACjB,kBAAsB;AAEtB,kDAA6C;AAU7C,MAAM,mBAAmB,CAAC,eAA2B,YAA8B;AAC/E,QAAM,cAAc,WAAW,MAAM;AACrC,QAAM,YAAY,CAAC,GAAG,SAAS,OAAO,CAAC,aAAa,eAAe;AAC/D,UAAM,WAAW,YAAY,aAAa;AAC1C,QAAI,CAAC,UAAU;AACX,YAAM,IAAI,MAAM,iBAAiB,uBAAuB,QAAQ,KAAK;AAAA;AAGzE,WAAO,SAAS;AAAA,KACjB;AAGH,QAAM,eAAe,UAAU,aAAa;AAC5C,MAAI,cAAc;AACd,WAAO,kBAAM,aAAa,aAAa;AAAA;AAG3C,SAAO,kBAAM,aAAa;AAAA;AAGvB,MAAM,gBAAgB,OACzB,YACwE;AACxE,QAAM,4BAA4B,MAAM,yDAAiC;AAAA,IACrE,aAAa,oBAAK,QAAQ,WAAW;AAAA,IACrC,eAAe,oBAAK,QAAQ,WAAW;AAAA,KACxC;AAEH,SAAO,4BACA,4BADA;AAAA,IAEH,kBAAkB,IAAI,YAClB,iBAAiB,0BAA0B,YAA0B,GAAG;AAAA;AAAA;AAI7E,MAAM,kBAAkB;AAAA,EAC3B,SAAS,CAAC,oBAAK,KAAK,QAAQ,OAAO;AAAA;AAGhC,MAAM,aAAkB;AAAA,EAC3B,SAAS;AAAA,EACT,UAAU;AAAA,IACN,MAAM;AAAA;AAAA,EAEV,SAAS,CAAC,oBAAK,KAAK,QAAQ,OAAO;AAAA;",
  "names": []
}
