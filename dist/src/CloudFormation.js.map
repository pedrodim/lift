{
  "version": 3,
  "sources": ["../../src/CloudFormation.ts"],
  "sourcesContent": ["import { DescribeStacksInput, DescribeStacksOutput } from \"aws-sdk/clients/cloudformation\";\nimport { CfnOutput, Stack } from \"@aws-cdk/core\";\nimport { debug } from \"./utils/logger\";\nimport AwsProvider from \"./classes/AwsProvider\";\n\nexport async function getStackOutput(aws: AwsProvider, output: CfnOutput): Promise<string | undefined> {\n    const outputId = Stack.of(output.stack).resolve(output.logicalId) as string;\n    const stackName = aws.stackName;\n\n    debug(`Fetching output \"${outputId}\" in stack \"${stackName}\"`);\n\n    let data: DescribeStacksOutput;\n    try {\n        data = await aws.request<DescribeStacksInput, DescribeStacksOutput>(\"CloudFormation\", \"describeStacks\", {\n            StackName: stackName,\n        });\n    } catch (e) {\n        if (e instanceof Error && e.message === `Stack with id ${stackName} does not exist`) {\n            debug(e.message);\n\n            return undefined;\n        }\n\n        throw e;\n    }\n    if (!data.Stacks || !data.Stacks[0].Outputs) {\n        return undefined;\n    }\n    for (const item of data.Stacks[0].Outputs) {\n        if (item.OutputKey === outputId) {\n            return item.OutputValue;\n        }\n    }\n\n    return undefined;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,kBAAiC;AACjC,oBAAsB;AAGtB,8BAAqC,KAAkB,QAAgD;AACnG,QAAM,WAAW,kBAAM,GAAG,OAAO,OAAO,QAAQ,OAAO;AACvD,QAAM,YAAY,IAAI;AAEtB,2BAAM,oBAAoB,uBAAuB;AAEjD,MAAI;AACJ,MAAI;AACA,WAAO,MAAM,IAAI,QAAmD,kBAAkB,kBAAkB;AAAA,MACpG,WAAW;AAAA;AAAA,WAEV,GAAP;AACE,QAAI,aAAa,SAAS,EAAE,YAAY,iBAAiB,4BAA4B;AACjF,+BAAM,EAAE;AAER,aAAO;AAAA;AAGX,UAAM;AAAA;AAEV,MAAI,CAAC,KAAK,UAAU,CAAC,KAAK,OAAO,GAAG,SAAS;AACzC,WAAO;AAAA;AAEX,aAAW,QAAQ,KAAK,OAAO,GAAG,SAAS;AACvC,QAAI,KAAK,cAAc,UAAU;AAC7B,aAAO,KAAK;AAAA;AAAA;AAIpB,SAAO;AAAA;",
  "names": []
}
