{
  "version": 3,
  "sources": ["../../../src/constructs/Queue.ts"],
  "sourcesContent": ["import { Queue as CdkQueue } from \"@aws-cdk/aws-sqs\";\nimport { FromSchema } from \"json-schema-to-ts\";\nimport { Alarm, ComparisonOperator, Metric } from \"@aws-cdk/aws-cloudwatch\";\nimport { Subscription, SubscriptionProtocol, Topic } from \"@aws-cdk/aws-sns\";\nimport { AlarmActionConfig } from \"@aws-cdk/aws-cloudwatch/lib/alarm-action\";\nimport { Construct as CdkConstruct, CfnOutput, Duration } from \"@aws-cdk/core\";\nimport { PolicyStatement } from \"../Stack\";\nimport Construct from \"../classes/Construct\";\nimport AwsProvider from \"../classes/AwsProvider\";\n\nexport const QUEUE_DEFINITION = {\n    type: \"object\",\n    properties: {\n        type: { const: \"queue\" },\n        worker: {\n            type: \"object\",\n            properties: {\n                handler: { type: \"string\" },\n                timeout: { type: \"number\" },\n            },\n            required: [\"handler\"],\n            additionalProperties: true,\n        },\n        maxRetries: { type: \"number\" },\n        alarm: { type: \"string\" },\n        batchSize: {\n            type: \"number\",\n            minimum: 1,\n            maximum: 10,\n        },\n    },\n    additionalProperties: false,\n    required: [\"worker\"],\n} as const;\ntype Configuration = FromSchema<typeof QUEUE_DEFINITION>;\n\nexport class Queue extends CdkConstruct implements Construct {\n    private readonly queue: CdkQueue;\n    private readonly queueArnOutput: CfnOutput;\n    private readonly queueUrlOutput: CfnOutput;\n    private readonly dlqUrlOutput: CfnOutput;\n\n    constructor(\n        scope: CdkConstruct,\n        private readonly id: string,\n        private readonly configuration: Configuration,\n        private readonly provider: AwsProvider\n    ) {\n        super(scope, id);\n\n        // The default function timeout is 6 seconds in the Serverless Framework\n        const functionTimeout = configuration.worker.timeout ?? 6;\n\n        const maxRetries = configuration.maxRetries ?? 3;\n\n        const dlq = new CdkQueue(this, \"Dlq\", {\n            queueName: `${this.provider.stackName}-${id}-dlq`,\n            // 14 days is the maximum, we want to keep these messages for as long as possible\n            retentionPeriod: Duration.days(14),\n        });\n\n        this.queue = new CdkQueue(this, \"Queue\", {\n            queueName: `${this.provider.stackName}-${id}`,\n            // This should be 6 times the lambda function's timeout\n            // See https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html\n            visibilityTimeout: Duration.seconds(functionTimeout * 6),\n            deadLetterQueue: {\n                maxReceiveCount: maxRetries,\n                queue: dlq,\n            },\n        });\n\n        const alarmEmail = configuration.alarm;\n        if (alarmEmail !== undefined) {\n            const alarmTopic = new Topic(this, \"AlarmTopic\", {\n                topicName: `${this.provider.stackName}-${id}-dlq-alarm-topic`,\n                displayName: `[Alert][${id}] There are failed jobs in the dead letter queue.`,\n            });\n            new Subscription(this, \"AlarmTopicSubscription\", {\n                topic: alarmTopic,\n                protocol: SubscriptionProtocol.EMAIL,\n                endpoint: alarmEmail,\n            });\n\n            const alarm = new Alarm(this, \"Alarm\", {\n                alarmName: `${this.provider.stackName}-${id}-dlq-alarm`,\n                alarmDescription: \"Alert triggered when there are failed jobs in the dead letter queue.\",\n                metric: new Metric({\n                    namespace: \"AWS/SQS\",\n                    metricName: \"ApproximateNumberOfMessagesVisible\",\n                    dimensions: {\n                        QueueName: dlq.queueName,\n                    },\n                    statistic: \"Sum\",\n                    period: Duration.minutes(1),\n                }),\n                evaluationPeriods: 1,\n                // Alert as soon as we have 1 message in the DLQ\n                threshold: 0,\n                comparisonOperator: ComparisonOperator.GREATER_THAN_THRESHOLD,\n            });\n            alarm.addAlarmAction({\n                bind(): AlarmActionConfig {\n                    return { alarmActionArn: alarmTopic.topicArn };\n                },\n            });\n        }\n\n        // CloudFormation outputs\n        this.queueArnOutput = new CfnOutput(this, \"QueueArn\", {\n            description: `ARN of the \"${id}\" SQS queue.`,\n            value: this.queue.queueArn,\n        });\n        this.queueUrlOutput = new CfnOutput(this, \"QueueUrl\", {\n            description: `URL of the \"${id}\" SQS queue.`,\n            value: this.queue.queueUrl,\n        });\n        this.dlqUrlOutput = new CfnOutput(this, \"DlqUrl\", {\n            description: `URL of the \"${id}\" SQS Dead Letter Queue.`,\n            value: dlq.queueUrl,\n        });\n\n        this.appendFunctions();\n    }\n\n    commands(): Record<string, () => void | Promise<void>> {\n        return {};\n    }\n\n    outputs(): Record<string, () => Promise<string | undefined>> {\n        return {\n            queueUrl: () => this.getQueueUrl(),\n        };\n    }\n\n    references(): Record<string, Record<string, unknown>> {\n        return {\n            queueUrl: this.referenceQueueUrl(),\n            queueArn: this.referenceQueueArn(),\n        };\n    }\n\n    permissions(): PolicyStatement[] {\n        return [new PolicyStatement(\"sqs:SendMessage\", [this.referenceQueueArn()])];\n    }\n\n    private appendFunctions(): void {\n        // The default batch size is 1\n        const batchSize = this.configuration.batchSize ?? 1;\n\n        // Override events for the worker\n        this.configuration.worker.events = [\n            // Subscribe the worker to the SQS queue\n            {\n                sqs: {\n                    arn: this.referenceQueueArn(),\n                    batchSize: batchSize,\n                    // TODO add setting\n                    maximumBatchingWindow: 60,\n                },\n            },\n        ];\n        this.provider.addFunction(`${this.id}Worker`, this.configuration.worker);\n    }\n\n    private referenceQueueArn(): Record<string, unknown> {\n        return this.provider.getCloudFormationReference(this.queue.queueArn);\n    }\n\n    private referenceQueueUrl(): Record<string, unknown> {\n        return this.provider.getCloudFormationReference(this.queue.queueUrl);\n    }\n\n    private async getQueueUrl(): Promise<string | undefined> {\n        return this.provider.getStackOutput(this.queueUrlOutput);\n    }\n\n    async getDlqUrl(): Promise<string | undefined> {\n        return this.provider.getStackOutput(this.dlqUrlOutput);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
