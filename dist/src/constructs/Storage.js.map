{
  "version": 3,
  "sources": ["../../../src/constructs/Storage.ts"],
  "sourcesContent": ["import { BlockPublicAccess, Bucket, BucketEncryption, StorageClass } from \"@aws-cdk/aws-s3\";\nimport { Construct as CdkConstruct, CfnOutput, Duration, Fn, Stack } from \"@aws-cdk/core\";\nimport { FromSchema } from \"json-schema-to-ts\";\nimport { PolicyStatement } from \"../Stack\";\nimport Construct from \"../classes/Construct\";\nimport AwsProvider from \"../classes/AwsProvider\";\n\nexport const STORAGE_DEFINITION = {\n    type: \"object\",\n    properties: {\n        type: { const: \"storage\" },\n        archive: { type: \"number\", minimum: 30 },\n        encryption: {\n            anyOf: [{ const: \"s3\" }, { const: \"kms\" }],\n        },\n    },\n    additionalProperties: false,\n} as const;\nconst STORAGE_DEFAULTS: Required<FromSchema<typeof STORAGE_DEFINITION>> = {\n    type: \"storage\",\n    archive: 45,\n    encryption: \"s3\",\n};\n\nexport class Storage extends CdkConstruct implements Construct {\n    private readonly bucket: Bucket;\n    private readonly bucketNameOutput: CfnOutput;\n\n    constructor(\n        scope: CdkConstruct,\n        id: string,\n        configuration: FromSchema<typeof STORAGE_DEFINITION>,\n        private readonly provider: AwsProvider\n    ) {\n        super(scope, id);\n\n        const resolvedConfiguration = Object.assign({}, STORAGE_DEFAULTS, configuration);\n\n        const encryptionOptions = {\n            s3: BucketEncryption.S3_MANAGED,\n            kms: BucketEncryption.KMS_MANAGED,\n        };\n\n        this.bucket = new Bucket(this, \"Bucket\", {\n            encryption: encryptionOptions[resolvedConfiguration.encryption],\n            versioned: true,\n            blockPublicAccess: BlockPublicAccess.BLOCK_ALL,\n            enforceSSL: true,\n            lifecycleRules: [\n                {\n                    transitions: [\n                        {\n                            storageClass: StorageClass.INTELLIGENT_TIERING,\n                            transitionAfter: Duration.days(0),\n                        },\n                    ],\n                },\n                {\n                    noncurrentVersionExpiration: Duration.days(30),\n                },\n            ],\n        });\n\n        this.bucketNameOutput = new CfnOutput(this, \"BucketName\", {\n            value: this.bucket.bucketName,\n        });\n    }\n\n    references(): Record<string, Record<string, unknown>> {\n        return {\n            bucketArn: this.referenceBucketArn(),\n            bucketName: this.referenceBucketName(),\n        };\n    }\n\n    permissions(): PolicyStatement[] {\n        return [\n            new PolicyStatement(\n                [\"s3:PutObject\", \"s3:GetObject\", \"s3:DeleteObject\", \"s3:ListBucket\"],\n                [\n                    this.referenceBucketArn(),\n                    // @ts-expect-error join only accepts a list of strings, whereas other intrinsic functions are commonly accepted\n                    Stack.of(this).resolve(Fn.join(\"/\", [this.referenceBucketArn(), \"*\"])),\n                ]\n            ),\n        ];\n    }\n\n    commands(): Record<string, () => void | Promise<void>> {\n        return {};\n    }\n\n    outputs(): Record<string, () => Promise<string | undefined>> {\n        return {\n            bucketName: () => this.getBucketName(),\n        };\n    }\n\n    referenceBucketName(): Record<string, unknown> {\n        return this.provider.getCloudFormationReference(this.bucket.bucketName);\n    }\n\n    referenceBucketArn(): Record<string, unknown> {\n        return this.provider.getCloudFormationReference(this.bucket.bucketArn);\n    }\n\n    async getBucketName(): Promise<string | undefined> {\n        return this.provider.getStackOutput(this.bucketNameOutput);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA0E;AAC1E,kBAA0E;AAE1E,mBAAgC;AAIzB,MAAM,qBAAqB;AAAA,EAC9B,MAAM;AAAA,EACN,YAAY;AAAA,IACR,MAAM,CAAE,OAAO;AAAA,IACf,SAAS,CAAE,MAAM,UAAU,SAAS;AAAA,IACpC,YAAY;AAAA,MACR,OAAO,CAAC,CAAE,OAAO,OAAQ,CAAE,OAAO;AAAA;AAAA;AAAA,EAG1C,sBAAsB;AAAA;AAE1B,MAAM,mBAAoE;AAAA,EACtE,MAAM;AAAA,EACN,SAAS;AAAA,EACT,YAAY;AAAA;AAGT,sBAAsB,sBAAkC;AAAA,EAI3D,YACI,OACA,IACA,eACiB,UACnB;AACE,UAAM,OAAO;AAFI;AAIjB,UAAM,wBAAwB,OAAO,OAAO,IAAI,kBAAkB;AAElE,UAAM,oBAAoB;AAAA,MACtB,IAAI,+BAAiB;AAAA,MACrB,KAAK,+BAAiB;AAAA;AAG1B,SAAK,SAAS,IAAI,qBAAO,MAAM,UAAU;AAAA,MACrC,YAAY,kBAAkB,sBAAsB;AAAA,MACpD,WAAW;AAAA,MACX,mBAAmB,gCAAkB;AAAA,MACrC,YAAY;AAAA,MACZ,gBAAgB;AAAA,QACZ;AAAA,UACI,aAAa;AAAA,YACT;AAAA,cACI,cAAc,2BAAa;AAAA,cAC3B,iBAAiB,qBAAS,KAAK;AAAA;AAAA;AAAA;AAAA,QAI3C;AAAA,UACI,6BAA6B,qBAAS,KAAK;AAAA;AAAA;AAAA;AAKvD,SAAK,mBAAmB,IAAI,sBAAU,MAAM,cAAc;AAAA,MACtD,OAAO,KAAK,OAAO;AAAA;AAAA;AAAA,EAI3B,aAAsD;AAClD,WAAO;AAAA,MACH,WAAW,KAAK;AAAA,MAChB,YAAY,KAAK;AAAA;AAAA;AAAA,EAIzB,cAAiC;AAC7B,WAAO;AAAA,MACH,IAAI,6BACA,CAAC,gBAAgB,gBAAgB,mBAAmB,kBACpD;AAAA,QACI,KAAK;AAAA,QAEL,kBAAM,GAAG,MAAM,QAAQ,eAAG,KAAK,KAAK,CAAC,KAAK,sBAAsB;AAAA;AAAA;AAAA;AAAA,EAMhF,WAAuD;AACnD,WAAO;AAAA;AAAA,EAGX,UAA6D;AACzD,WAAO;AAAA,MACH,YAAY,MAAM,KAAK;AAAA;AAAA;AAAA,EAI/B,sBAA+C;AAC3C,WAAO,KAAK,SAAS,2BAA2B,KAAK,OAAO;AAAA;AAAA,EAGhE,qBAA8C;AAC1C,WAAO,KAAK,SAAS,2BAA2B,KAAK,OAAO;AAAA;AAAA,QAG1D,gBAA6C;AAC/C,WAAO,KAAK,SAAS,eAAe,KAAK;AAAA;AAAA;",
  "names": []
}
