{
  "version": 3,
  "sources": ["../../../src/classes/AwsProvider.ts"],
  "sourcesContent": ["import { CfnOutput, Stack } from \"@aws-cdk/core\";\nimport { getStackOutput } from \"../CloudFormation\";\nimport { Provider as LegacyAwsProvider, Serverless } from \"../types/serverless\";\n\nexport default class AwsProvider {\n    public readonly region: string;\n    public readonly stackName: string;\n    private readonly legacyProvider: LegacyAwsProvider;\n    public naming: { getStackName: () => string; getLambdaLogicalId: (functionName: string) => string };\n\n    constructor(private readonly serverless: Serverless, public readonly stack: Stack) {\n        this.stackName = serverless.getProvider(\"aws\").naming.getStackName();\n\n        this.legacyProvider = serverless.getProvider(\"aws\");\n        this.naming = this.legacyProvider.naming;\n        this.region = serverless.getProvider(\"aws\").getRegion();\n    }\n\n    addFunction(functionName: string, functionConfig: unknown): void {\n        Object.assign(this.serverless.service.functions, {\n            [functionName]: functionConfig,\n        });\n    }\n\n    /**\n     * Resolves the value of a CloudFormation stack output.\n     */\n    async getStackOutput(output: CfnOutput): Promise<string | undefined> {\n        return getStackOutput(this, output);\n    }\n\n    /**\n     * Returns a CloudFormation intrinsic function, like Fn::Ref, GetAtt, etc.\n     */\n    getCloudFormationReference(value: string): Record<string, unknown> {\n        return Stack.of(this.stack).resolve(value) as Record<string, unknown>;\n    }\n\n    /**\n     * Send a request to the AWS API.\n     */\n    async request<Input, Output>(service: string, method: string, params: Input): Promise<Output> {\n        return await this.legacyProvider.request<Input, Output>(service, method, params);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiC;AACjC,4BAA+B;AAG/B,kBAAiC;AAAA,EAM7B,YAA6B,YAAwC,OAAc;AAAtD;AAAwC;AACjE,SAAK,YAAY,WAAW,YAAY,OAAO,OAAO;AAEtD,SAAK,iBAAiB,WAAW,YAAY;AAC7C,SAAK,SAAS,KAAK,eAAe;AAClC,SAAK,SAAS,WAAW,YAAY,OAAO;AAAA;AAAA,EAGhD,YAAY,cAAsB,gBAA+B;AAC7D,WAAO,OAAO,KAAK,WAAW,QAAQ,WAAW;AAAA,OAC5C,eAAe;AAAA;AAAA;AAAA,QAOlB,eAAe,QAAgD;AACjE,WAAO,0CAAe,MAAM;AAAA;AAAA,EAMhC,2BAA2B,OAAwC;AAC/D,WAAO,kBAAM,GAAG,KAAK,OAAO,QAAQ;AAAA;AAAA,QAMlC,QAAuB,SAAiB,QAAgB,QAAgC;AAC1F,WAAO,MAAM,KAAK,eAAe,QAAuB,SAAS,QAAQ;AAAA;AAAA;",
  "names": []
}
